# Secure Home Quiz - Cursor AI Rules

## Project Context
This is a Spanish-language (ES-MX) educational website for Mexican parents/guardians about digital safety for children. The project converts a manual into an interactive web experience with:
- Educational content and storytelling
- Personalized diagnostic quiz â†’ custom action plan
- Reference hub with platform-specific guides

## Tech Stack
- React 18 + TypeScript + Vite
- Tailwind CSS + shadcn-ui + Radix primitives
- Supabase for backend
- Framer Motion for animations
- React Router for navigation

## Code Style & Patterns
- Use functional components with hooks (no class components)
- Prefer TypeScript strict mode
- Use `tailwind-merge` and `cn` helper for class composition
- Follow existing file organization under `src/`
- Keep components small and focused
- Use proper TypeScript types from `src/types/`

## Project Structure
- `src/components/quiz/` - Quiz flow components
- `src/components/ui/` - shadcn-ui components
- `src/hooks/` - Custom React hooks
- `src/pages/` - Route components
- `src/types/` - TypeScript type definitions
- `src/utils/` - Utility functions

## Key Features
- Multi-step quiz with age bands (6-8, 9-12, 13-15, 16-17)
- Platform-specific guidance (WhatsApp, YouTube, Roblox/Minecraft, TikTok)
- Risk assessment (inappropriate content, grooming, cyberbullying, etc.)
- Personalized action plans with conversation scripts
- Email opt-in for PDF plans
- Analytics tracking for conversion optimization

## Content Guidelines
- All content in Spanish (Mexico)
- Warm, actionable tone
- Focus on practical steps parents can take
- Age-appropriate recommendations
- Platform-specific advice

## Development Workflow
- Run `npm run dev` for development server
- Use `npm run lint` before committing
- Test UI flows manually for interactive components
- Follow accessibility guidelines (WCAG AA)
- Optimize for mobile performance

## File Naming
- Use PascalCase for React components
- Use camelCase for utilities and hooks
- Use kebab-case for CSS classes
- Include `.tsx` extension for React components
- Include `.ts` extension for TypeScript files

## Dependencies
- Avoid adding new dependencies without explicit approval
- Prefer existing shadcn-ui components
- Use Radix primitives for accessibility
- Leverage existing Tailwind utilities

## Analytics & Privacy
- Track user interactions for optimization
- Respect privacy with opt-in email collection
- Use first-party analytics (no third-party tracking)
- Follow Mexican privacy regulations
